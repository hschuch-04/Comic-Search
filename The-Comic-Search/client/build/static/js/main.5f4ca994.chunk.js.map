{"version":3,"sources":["Components/PopulateList.js","Components/RelatedNews.js","Components/RelatedWikipedia.js","Components/DisplaySeries.js","App.js","serviceWorker.js","index.js"],"names":["PopulateList","props","className","title","data","available","items","map","response","i","name","RelatedNews","bool","description","href","url","source","RelatedWikipedia","useState","wikiLink","setWikiLink","a","results","promises","length","push","axios","get","then","key","pages","Promise","all","catch","error","console","log","useEffect","fetchWiki","fullurl","DisplaySeries","count","setCount","characters","setCharacters","issues","setIssues","creators","setCreators","setDescription","event","setEvent","image","setImage","setTitle","next","setNext","previous","setPrevious","article","setArticle","returnArticle","setReturnArticle","series","thumbnail","path","extension","events","comics","news","totalResults","articles","src","App","search","setSearch","apiSeries","setApiSeries","apiNews","setApiNews","button","setButton","active","setActive","alert","onSubmit","e","preventDefault","fetchData","method","target","type","placeholder","value","required","onChange","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5f4ca994.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// Creates the list elements for the page\r\nfunction PopulateList(props) {\r\n    return (\r\n        <div className={props.title + '-container'}>\r\n            <h3>{props.title}</h3>\r\n            <div className={props.title}>\r\n                {props.data.available === 0 ? <>There were no {props.title} recorded </>\r\n                    :\r\n                    <ul>{props.data.items.map((response, i) => {\r\n                        return (\r\n                            <li>{response.name}</li>\r\n                        )\r\n                    })}</ul>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PopulateList;","import React from 'react';\r\n\r\n// Populates the page with information received from the NEWS API\r\nfunction RelatedNews(props) {\r\n    return (\r\n        <div className='news-container'>\r\n            <h3>Related News</h3>\r\n            <div className='news'>\r\n                {props.bool === false ? <>There are no related articles available currently</>\r\n                :\r\n                <>\r\n                    <h5>{props.data.title}</h5>\r\n                    <p>{props.data.description}</p>\r\n                    <a href={props.data.url}>{props.data.source.name}</a>\r\n                </>\r\n            }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default RelatedNews;","import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\n// Grabs related wikipedia details about the creators\r\nfunction RelatedWikipedia(props) {\r\n    const [wikiLink, setWikiLink] = useState([]) // All the wiki information\r\n\r\n    // Fetches wikipedia api info\r\n    async function fetchWiki() {\r\n        let results = [];\r\n        let promises = [];\r\n        for (let i = 0; i < props.data.items.length; i++) {\r\n            promises.push(\r\n                axios.get(`/wiki/${props.data.items[i].name}`).then(response => {\r\n                    for (var key in response.data.pages) {\r\n                        results.push(response.data.pages[key])\r\n                    }\r\n                })\r\n            )\r\n        }\r\n        // Awaits all promises to resolve\r\n        Promise.all(promises)\r\n            .then(() => {\r\n                setWikiLink(results)\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    // Checks whether props have been passed with information\r\n    useEffect(() => {\r\n        if (props.data != {}) {\r\n            fetchWiki()\r\n        }\r\n    }, [props.data])\r\n\r\n\r\n    return (\r\n        <div className='wiki-container'>\r\n            <h3>Related Wikipedia</h3>\r\n            <div className='wiki'>\r\n                {wikiLink.length === 0 ? <>There was no Creators or Artists available</>\r\n                    :\r\n                    <ul>\r\n                        {wikiLink.map((data, i) => {\r\n                            return (\r\n                                <li><b>{data.title}</b> - <a href={data.fullurl}>{data.fullurl}</a></li>\r\n                            )\r\n                        })}\r\n                    </ul>\r\n                }\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RelatedWikipedia;","import React, { useEffect, useState } from 'react';\r\nimport './DisplaySeries.css';\r\nimport './PopulateList.js';\r\nimport PopulateList from './PopulateList.js';\r\nimport RelatedNews from './RelatedNews.js';\r\nimport RelatedWikipedia from './RelatedWikipedia';\r\n\r\n// Displaying all the comics\r\nfunction DisplaySeries(props) {\r\n  const [count, setCount] = useState(0)                   // Checks whether to update the <div></div>\r\n  const [characters, setCharacters] = useState({})        // The character list\r\n  const [issues, setIssues] = useState(0)                // The amount of issues available\r\n  const [creators, setCreators] = useState({})            // The creators list\r\n  const [description, setDescription] = useState(\"\")      // The description\r\n  const [event, setEvent] = useState([])                  // The event that occurs in the series\r\n  const [image, setImage] = useState(\"\")                  // The thumbnail of the series\\\r\n  const [title, setTitle] = useState(\"\")                  // The working title of the series\r\n  const [next, setNext] = useState({})                    // The next series after the comic\r\n  const [previous, setPrevious] = useState({})            // The previous series of the comic\r\n\r\n  const [article, setArticle] = useState({})\r\n  const [returnArticle, setReturnArticle] = useState(false)\r\n\r\n\r\n  // Populates the series data from the first api\r\n  function createSeries() {\r\n    if (props.series.count > 0) {\r\n      setCount(props.series.count)\r\n      setTitle(props.series.results[0].title)\r\n      setImage(props.series.results[0].thumbnail.path + \".\" + props.series.results[0].thumbnail.extension)\r\n      setDescription(props.series.results[0].description)\r\n      setEvent(props.series.results[0].events)\r\n      setCharacters(props.series.results[0].characters)\r\n      setIssues(props.series.results[0].comics.available)\r\n      setCreators(props.series.results[0].creators)\r\n      setNext(props.series.results[0].next)\r\n      setPrevious(props.series.results[0].previous)\r\n    }\r\n  }\r\n\r\n\r\n  // Populates the news data from the second api\r\n  function createNews() {\r\n    if (props.news.totalResults > 0) {\r\n      setArticle(props.news.articles[0])\r\n      setReturnArticle(true)\r\n    }\r\n  }\r\n\r\n\r\n  // Update the values when \r\n  useEffect(() => {\r\n    createSeries()\r\n    createNews()\r\n  }, [props.series, props.news])\r\n\r\n\r\n\r\n  // The Information of the Series\r\n  return (\r\n    <div>\r\n      {count === 0 ? <></>\r\n        :\r\n        <div className='wrapper'>\r\n          <div className='profile-information shadow'>\r\n            <h5 className='title-text'>{title}</h5>\r\n            <div className='thumbnail-container'>\r\n              <a href={image}><img className='thumbnail-image' src={image} /></a>\r\n            </div>\r\n            <div className='info-header'>\r\n              <h6>Series Information</h6>\r\n            </div>\r\n            <div className='issues-container'>\r\n              <b>Total Issues:</b> {issues}\r\n            </div>\r\n            <div className='events-container'>\r\n              <b>Events:</b> {event.available === 0 ? <>No Major Events</> :\r\n                <ul>\r\n                  {event.items.map((response, i) => {\r\n                    return (\r\n                      <li>\r\n                        {response.name}\r\n                      </li>\r\n                    )\r\n                  })}\r\n                </ul>\r\n              }\r\n            </div>\r\n            <div className='previous-container'>\r\n              <b>Previous Series:</b> {previous === null ? <>None</> : <>{previous.name}</>}\r\n            </div>\r\n            <div className='next-container'>\r\n              <b>Next Series:</b> {next === null ? <>None</> : <>{next.name}</>}\r\n            </div>\r\n          </div>\r\n\r\n          <div className='series-information'>\r\n            <div className='description-container'>\r\n              <h3>Description</h3>\r\n              <div className='description'>\r\n                {description === null ? <>There is currently no description available for this series.</> : <>{description}</>}\r\n              </div>\r\n            </div>\r\n            <hr />\r\n            <PopulateList title='Characters' data={characters} />\r\n            <hr />\r\n            <PopulateList title='Creators and Artists' data={creators} />\r\n            <hr />\r\n            <RelatedNews data={article} bool={returnArticle} />\r\n            <hr />\r\n            <RelatedWikipedia data={creators} />\r\n          </div>\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default DisplaySeries;","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios'\r\nimport './App.css';\r\nimport DisplaySeries from './Components/DisplaySeries';\r\n\r\n// --------------------------------- The Main Page --------------------------------- //\r\n\r\n\r\n// The main application\r\nfunction App() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [apiSeries, setApiSeries] = useState({});\r\n  const [apiNews, setApiNews] = useState({});\r\n  const [button, setButton] = useState('Submit')\r\n  const [active, setActive] = useState(false)\r\n\r\n\r\n  // The backend function to star the API calls\r\n  async function fetchData() {\r\n    setButton('Loading...')\r\n    setActive(true)\r\n    await axios.get(`/comic/${search}`)\r\n      .then((response) => {\r\n        setApiSeries(response.data.series.data)\r\n        setApiNews(response.data.news)\r\n        setButton('Submit')\r\n        setActive(false)\r\n      })\r\n      .catch((error) => {\r\n        setButton('Submit')\r\n        setActive(false)\r\n        alert(`There was an issue finding that Comic Series: ${search}`)\r\n      })\r\n\r\n  }\r\n\r\n  // The function for handling the form submission\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    fetchData();\r\n  }\r\n\r\n  // The Core of the Application\r\n  return (\r\n    <>\r\n      <div className='bg'>\r\n        <div className=\"search-container shadow\">\r\n          <div className=\"filter-sort\">\r\n            <h1>The Comic Search</h1>\r\n            <hr />\r\n            <form className=\"contact-form\"\r\n              onSubmit={handleSubmit}\r\n              method=\"POST\"\r\n              target=\"_blank\"\r\n            >\r\n              <div className=\"d-flex flex-column flex-sm-row justify-content-between align-items-center\">\r\n                <input\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  placeholder=\"Search Here...\"\r\n                  value={search}\r\n                  required\r\n                  onChange={(e) => setSearch(e.target.value)}\r\n                />\r\n\r\n                <button\r\n                  type=\"submit\"\r\n                  className=\"border-0 submit-question submit-button\"\r\n                  disabled={active}\r\n                >\r\n                  {button}\r\n                </button>\r\n              </div>\r\n            </form>\r\n\r\n            <DisplaySeries series={apiSeries} news={apiNews} />\r\n\r\n          </div>\r\n        </div>\r\n        <div className='bottom'></div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}